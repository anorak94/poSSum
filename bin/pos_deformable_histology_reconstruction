#!/usr/bin/env python
# -*- coding: utf-8 -*

"""
"""

import os
import sys
from optparse import OptionGroup
import copy

from possum import pos_wrappers
from possum import pos_parameters
from possum.pos_common import r

from possum.pos_wrapper_skel import output_volume_workflow
from possum.deformable_histology_iterations import deformable_reconstruction_iteration

from possum.pos_deformable_wrappers import preprocess_slice_volume, \
    convert_slice_image, convert_slice_image_grayscale


class deformable_reconstruction_workflow(output_volume_workflow):
    """
    """

    _f = {
        # Initial grayscale slices
        'init_slice': pos_parameters.filename('init_slice', work_dir='01_init_slices', str_template='{idx:04d}.nii.gz'),
        'init_slice_naming': pos_parameters.filename('init_slice_naming', work_dir='01_init_slices', str_template='%04d.nii.gz'),
        # Initial outline mask
        'init_outline': pos_parameters.filename('init_outline_naming', work_dir='02_outline_slices', str_template='{idx:04d}.nii.gz'),
        'init_outline_naming': pos_parameters.filename('init_outline_naming', work_dir='02_outline_slices', str_template='%04d.nii.gz'),
        # Initial custom outlier mask
        'init_custom': pos_parameters.filename('init_custom_naming', work_dir='04_custom_slices', str_template='{idx:04d}.nii.gz'),
        'init_custom_naming': pos_parameters.filename('init_custom_naming', work_dir='04_custom_slices', str_template='%04d.nii.gz'),
        # Initial external reference images
        'ref_custom': pos_parameters.filename('ref_custom_naming', work_dir='03_reference_slices', str_template='{idx:04d}.nii.gz'),
        'ref_custom_naming': pos_parameters.filename('ref_custom_naming', work_dir='03_reference_slices', str_template='%04d.nii.gz'),
        # Iteration
        'iteration': pos_parameters.filename('iteraltion', work_dir='05_iterations',  str_template='{iter:04d}'),
        'iteration_out_naming': pos_parameters.filename('iteration_out_naming', work_dir='05_iterations', str_template='{iter:04d}/11_transformations/{idx:04d}'),
        'iteration_transform': pos_parameters.filename('iteration_transform', work_dir='05_iterations', str_template='{iter:04d}/11_transformations/{idx:04d}Warp.nii.gz'),
        'iteration_transform_inverse': pos_parameters.filename('iteration_transform_inverse', work_dir='05_iterations', str_template='{iter:04d}/11_transformations/{idx:04d}InverseWarp.nii.gz'),
        'iteration_resliced': pos_parameters.filename('iteration_resliced', work_dir='05_iterations', str_template='{iter:04d}/21_resliced/'),
        'iteration_resliced_slice': pos_parameters.filename('iteration_resliced_slice', work_dir='05_iterations', str_template='{iter:04d}/21_resliced/{idx:04d}.nii.gz'),
        'iteration_resliced_outline': pos_parameters.filename('iteration_resliced_outline', work_dir='05_iterations', str_template='{iter:04d}/22_resliced_outline/'),
        'iteration_resliced_outline_slice': pos_parameters.filename('iteration_resliced_outline_slice', work_dir='05_iterations', str_template='{iter:04d}/22_resliced_outline/{idx:04d}.nii.gz'),
        'iteration_resliced_custom': pos_parameters.filename('iteration_resliced_custom', work_dir='05_iterations', str_template='{iter:04d}/24_resliced_custom/'),
        'iteration_resliced_custom_slice': pos_parameters.filename('iteration_resliced_custom_slice', work_dir='05_iterations', str_template='{iter:04d}/24_resliced_custom/{idx:04d}.nii.gz'),
        'inter_res': pos_parameters.filename('inter_res',  work_dir='08_intermediate_results', str_template=''),
        'inter_res_gray_vol': pos_parameters.filename('inter_res_gray_vol', work_dir='08_intermediate_results', str_template='intermediate_{output_naming}_{iter:04d}.nii.gz'),
        'inter_res_outline_vol': pos_parameters.filename('inter_res_outline_vol', work_dir='08_intermediate_results', str_template='intermediate_{output_naming}_outline_{iter:04d}.nii.gz'),
        'inter_res_custom_vol': pos_parameters.filename('inter_res_custom_vol', work_dir='08_intermediate_results', str_template='intermediate_{output_naming}_cmask_{iter:04d}.nii.gz'),
        'final_deformations': pos_parameters.filename('final_deformations', work_dir='09_final_deformation', str_template='{idx:04d}.nii.gz'),
        'final_deformations_inverse': pos_parameters.filename('final_deformations_inverse',   work_dir='09_final_deformation', str_template='{idx:04d}Inverse.nii.gz'),
        'rescaled_deformations': pos_parameters.filename('rescaled_deformations', work_dir='10_rescaled_deformation', str_template='{idx:04d}.nii.gz'),
        'rescaled_deformations_inverse': pos_parameters.filename('rescaled_deformations_inverse',   work_dir='10_rescaled_deformation', str_template='{idx:04d}Inverse.nii.gz'),
        'rescaled_source': pos_parameters.filename('rescaled_source', work_dir='11_rescaled_source', str_template='{idx:04d}.nii.gz'),
        'iteration_stack_mask': pos_parameters.filename('iteration_stack_mask', work_dir='05_iterations', str_template='{iter:04d}/21_resliced/%04d.nii.gz'),
        'iteration_stack_outline': pos_parameters.filename('iteration_stack_outline', work_dir='05_iterations', str_template='{iter:04d}/22_resliced_outline/%04d.nii.gz'),
        'iteration_stack_cmask': pos_parameters.filename('iteration_stack_cmask', work_dir='05_iterations', str_template='{iter:04d}/24_resliced_custom/%04d.nii.gz'),
        # Analysis
        'warp_field_visualization': pos_parameters.filename('warp_field_visualization', work_dir='15_deformation_analysis', str_template='{idx:04d}.png')
        }

    _usage = ""

    def _initializeOptions(self):
        super(self.__class__, self)._initializeOptions()

        # Handling situation when no volume is provided
        if not any([self.options.inputVolume,
                   self.options.outlineVolume,
                   self.options.referenceVolume,
                   self.options.maskedVolume]):
            self._logger.error("No input volumes provided. Exiting.")
            sys.exit(1)

    def _validate_options(self):
        super(self.__class__, self)._initializeOptions()

        # First important thing is that indexed of the first and
        # the last sections are required parameters:
        assert self.options.startSlice is not None, \
            self._logger.error(r("Index of the first section is required."))

        assert self.options.endSlice is not None, \
            self._logger.error(r("Index of the lase section is required."))

        # Second important thing is that the index of the starting section
        # has to be smaller than the index of the end-index.
        assert self.options.startSlice < \
               self.options.endSlice, \
            self._logger.error(r("The index of the first slice has to\
                greater than the index of the last section"))

    def _overrideDefaults(self):
        super(self.__class__, self)._overrideDefaults()

        # Process each type of the input volume. Currently there are three
        # types of input volumes supported: The input grayscale volume (the
        # actual imaege to be registared), the outline volume (volume pointing
        # wihch part of the image belongs to the slice and which part not).
        # The third type of the volume is a volume for outlier removal (so
        # called masked volume).
        if self.options.inputVolume:
            self.options.inputVolumeWeight = \
                float(self.options.inputVolume[0])
            self.options.inputVolume = self.options.inputVolume[1]
            self._logger.info("Selected input volume: %s, assigned weight: %f ." %
                (self.options.inputVolume, self.options.inputVolumeWeight))

        if self.options.outlineVolume:
            self.options.outlineVolumeWeight = \
                float(self.options.outlineVolume[0])
            self.options.outlineVolume = self.options.outlineVolume[1]
            self._logger.info("Selected outline volume: %s, assigned weight: %f ." %
                (self.options.outlineVolume, self.options.outlineVolumeWeight))

        if self.options.referenceVolume:
            self.options.referenceVolumeWeight = \
                float(self.options.referenceVolume[0])
            self.options.referenceVolume = self.options.referenceVolume[1]
            self._logger.info("Selected reference volume: %s, assigned weight: %f ." %
                (self.options.referenceVolume, self.options.referenceVolumeWeight))

        if self.options.maskedVolume:
            self.options.maskedVolumeWeight = \
                float(self.options.maskedVolume[0])
            self.options.maskedVolume = self.options.maskedVolume[1]
            self._logger.info("Applying a custom slice mask: %s ." %
                self.options.maskedVolume)

    def _get_prepare_volume_command_template(self):
        """
        :return: template for processing the input volumes.

        The templte has to be customized to process a particular type of
        volume.
        """
        preprocess_slices = preprocess_slice_volume(
            input_image=self.options.inputVolume,
            output_naming=self.f['init_slice_naming'](),
            slicing_plane=self.options.slicing_plane,
            start_slice=self.options.startSlice,
            end_slice=self.options.endSlice + 1,
            output_dir=self.f['init_slice'].base_dir)

        return preprocess_slices

    def prepare_slices(self):
        """
        Split provided input volumes into slices. The proceure requires the
        prvided volumes to be in grayscale mode (it's gonna work also with rgb
        volumes but the further registration process will collapse).

        Volumes are sectioned separately. If the swich for given volume is
        provided, the sections `start_slice` to `end_slice` are extracted. The
        process is repeated separately for each volume (grayscale, outline,
        custom mask volume, segmentation volume, etc...)
        """

        # Handle inputVolume (grayscale volume, aka THE registered image
        # volume)
        if self.options.inputVolume:
            preprocess_grayscale_slices = \
                self._get_prepare_volume_command_template()

            preprocess_grayscale_slices.updateParameters({
                'input_image': self.options.inputVolume,
                'output_naming': self.f['init_slice_naming'](),
                'output_dir': self.f['init_slice'].base_dir})
            preprocess_grayscale_slices()

        # Handle the outline volume. This volume is a binary volume (it can
        # contain only 0 and 1 values).
        if self.options.outlineVolume:
            prepare_outline_volume = \
                self._get_prepare_volume_command_template()

            prepare_outline_volume.updateParameters({
                'input_image': self.options.outlineVolume,
                'output_naming': self.f['init_outline_naming'](),
                'output_dir': self.f['init_outline'].base_dir})
            prepare_outline_volume()

        if self.options.referenceVolume:
            prepare_reference_volume = \
                self._get_prepare_volume_command_template()

            prepare_reference_volume.updateParameters({
                'input_image': self.options.referenceVolume,
                'output_naming': self.f['ref_custom_naming'](),
                'output_dir': self.f['ref_custom'].base_dir})
            prepare_reference_volume()

        # Handling custom mask volume. This volume is a mask volume which means
        # that it is a binary volume and contains only 0 and 1 values.
        if self.options.maskedVolume:
            prepare_masked_volume = \
                self._get_prepare_volume_command_template()

            prepare_masked_volume.updateParameters({
                'input_image': self.options.maskedVolume,
                'output_naming': self.f['init_custom_naming'](),
                'output_dir': self.f['init_custom_naming'].base_dir,
                'leave_overflows': True})

            prepare_masked_volume()

    def launch(self):
        """
        Launch the deformable registration process.
        """

        # Execute the parents before-execution activities
        super(self.__class__, self)._pre_launch()

        # Preprocessing the input sliced can be supressed by issuing a command
        # line parameter
        if not self.options.skipSlicePreprocess:
            self.prepare_slices()

        # If 'startFromIteration' switch is enabled,
        # the reconstruction starts from a given iteration
        # instead of starting from the beginning - iteration 0
        for iteration in range(self.options.startFromIteration,
                               self.options.iterations):

            self._logger.info("--------------------------------------")
            self._logger.info("Staring iteration: %d of %d" %
                (iteration + 1, self.options.iterations))
            self._logger.info("--------------------------------------")

            self.current_iteration = iteration

            # Make hard copy of the setting dictionaries. Hard copy is made as
            # it is passed to the 'deformable_reconstruction_iteration' class
            # and is is customized within this class. Because of that reason a
            # hard copy has to be made.
            step_options = copy.deepcopy(self.options)
            step_args = copy.deepcopy(self.args)

            step_options.workdir = \
                os.path.join(self.f['iteration'](iter=iteration))
            single_step = \
                deformable_reconstruction_iteration(step_options, step_args)
            single_step.parent_process = self

            # Settings for the first iteration has to be tweaked up a little as
            # they use slightly different image sources. Iteration 'zero' uses
            # the source images (images that were not processed at all) while
            # images for all the other iterations are processed by the previous
            # iterations.
            if iteration == 0:
                single_step.f['src_slice'].override_dir = self.f['init_slice'].base_dir
                single_step.f['outline'].override_dir = self.f['init_outline'].base_dir
                single_step.f['cmask'].override_dir = self.f['init_custom'].base_dir
            else:
                single_step.f['src_slice'].override_dir = self.f['iteration_resliced'](iter=iteration - 1)
                single_step.f['outline'].override_dir = self.f['iteration_resliced_outline'](iter=iteration - 1)
                single_step.f['cmask'].override_dir = self.f['iteration_resliced_custom'](iter=iteration - 1)

            # Do registration if proper switches are provided
            # (there is a possibility to run the reconstruction process without
            # actually calculationg the transfomations.
            if not self.options.skipTransformations:
                single_step()

            # Generate volume holding the intermediate results
            # and prepare images for the next iteration
            self._reslice()
            self._stack_intermediate()

        # At the end of the processing the calculated deformation fields can be
        # composed togeather to form the final deformation field.

        if self.options.stackFinalDeformation:
            self._generate_final_transforms()

        # Run parent's post execution activities
        super(self.__class__, self)._post_launch()

    def _get_edges(self):
        """
        Convenience function for returning frequently used numbers
        """
        return (self.options.startSlice,
                self.options.endSlice,
                self.options.neighbourhood,
                self.current_iteration)

    def _reslice(self):
        """
        Launch reslicing for each type of the input volume. If the volume of
        the given type is provided, it will be reslided, otherwise it is not
        resliced. Simple.
        """
        if self.options.inputVolume:
            self._reslice_input_volume()

        if self.options.outlineVolume:
            self._reslice_outline()

        if self.options.maskedVolume:
            self._reslice_custom_masks()

    def _get_reslice_command(self, slice_number, slice_type, output_slice_type,
            method=pos_wrappers.ants_reslice, transformation_type='forward'):
        """
        Helper for generating reslicing command for different slices, reslicing
        with different types, etc.

        :return: Command for reslicing given slice according to provided
                 parameters
        """

        start, end, eps, iteration = self._get_edges()

        i = slice_number  # Just an alias

        # Select appropriate file type according to the provided
        # transformation direction (which could be either forward or inverse)

        # Define a list of deformation fields file
        transformation_settings = {
            'forward': ('iteration_transform', range(iteration + 1)),
            'inverse': ('iteration_transform_inverse', reversed(range(iteration + 1)))}
        file_template, sections_order = \
            transformation_settings[transformation_type]

        deformable_list = \
            map(lambda j: self.f[file_template](idx=i, iter=j), sections_order)

        moving_image = self.f[slice_type](idx=i)

        # Use 'ants_reslice' when a regular reslicing is done. A regular
        # reslicing occur after each iteration.
        if method == pos_wrappers.ants_reslice:
            command = method(
                dimension=2,
                moving_image=moving_image,
                output_image=self.f[output_slice_type](idx=i, iter=iteration),
                reference_image=moving_image,
                deformable_list=deformable_list,
                affine_list=[])
            return command

        # Use 'ants_compose_multi_transform' for composing individual
        # deformation fields into a single deformation fiels.
        if method == pos_wrappers.ants_compose_multi_transform:
            command = method(
                dimension=2,
                output_image=self.f[output_slice_type](idx=i, iter=iteration),
                reference_image=moving_image,
                deformable_list=deformable_list,
                affine_list=[])
            return command

    def _reslice_input_volume(self):
        start, end, eps, iteration = self._get_edges()

        commands = []
        for i in range(start, end + 1):
            command = \
                self._get_reslice_command(i, 'init_slice', 'iteration_resliced_slice')
            command.updateParameters({'useBspline': True, 'useNN': None})
            commands.append(copy.deepcopy(command))

        self.execute(commands)

    def _reslice_outline(self):
        start, end, eps, iteration = self._get_edges()

        commands = []
        for i in range(start, end + 1):
            command = self._get_reslice_command(i,
                'init_outline', 'iteration_resliced_outline_slice')
            command.updateParameters({'useNN': None, 'useBspline': None})
            commands.append(copy.deepcopy(command))

        self.execute(commands)

    def _reslice_custom_masks(self):
        start, end, eps, iteration = self._get_edges()

        commands = []
        for i in range(start, end + 1):
            command = self._get_reslice_command(i,
                'init_custom', 'iteration_resliced_custom_slice')
            command.updateParameters({'useBspline': None, 'useNN': True})
            commands.append(copy.deepcopy(command))

        self.execute(commands)

    def _generate_final_transforms(self):
        """
        Compose the individual deformation fields calculated in each iteration
        into a single deformation field that can be analysed. In other words,
        this procedure just sums up all the individual deformation filelds.
        """

        # As usually, get the slice range:
        start, end, eps, iteration = self._get_edges()

        # For each slice, compose all the separated deformation fields:
        commands = []
        for i in range(start, end + 1):
            command = self._get_reslice_command(i, 'init_slice',
                'iteration_resliced_slice',
                method=pos_wrappers.ants_compose_multi_transform)
            command.updateParameters({
                'output_image': self.f['final_deformations'](idx=i)})
            commands.append(copy.deepcopy(command))
        self.execute(commands)

        # And now the same for the inverse transformations, this time in
        # reversed order. The reason why we compose the inverse tranformations
        # in a reverse order is that this is the correct way to do this :) And
        # the reason why we want to use get the reverset transformations is
        # that we would like to be able transform the data from in a unaligned
        # -> aligned direction byt also in the the opposite direction. Thus, we
        # need the invere transformation as well... bla bla bla...

        commands = []
        for i in range(start, end + 1):
            command = self._get_reslice_command(i, 'init_slice', 'iteration_resliced_slice',
                method=pos_wrappers.ants_compose_multi_transform,
                transformation_type='inverse')
            command.updateParameters({
                'output_image': self.f['final_deformations_inverse'](idx=i)})
            commands.append(copy.deepcopy(command))
        self.execute(commands)

        # The deformation fileds are scaled so that spacing is 1x1mm We have to
        # rescale them, in terms of values as well as well as in terms of
        # spacing.

        # Extract the spacing.
        norm_spacing = float(self.options.planeSpacing)

        commands = []
        for i in range(start, end + 1):
            out_idx = i + self.options.shift_final_indexes
            command = convert_slice_image(
                input_image=self.f['final_deformations'](idx=i),
                output_image=self.f['rescaled_deformations'](idx=out_idx),
                scaling=norm_spacing,
                spacing=[norm_spacing, norm_spacing])
            commands.append(copy.deepcopy(command))
        self.execute(commands)

        # Ok, this is slightly more tricky. The thing here is that we want not
        # compose also the inverse transformations so it will be possible to
        # map data from the space of the deformable reconstruction to the
        # initial space.
        commands = []
        for i in range(start, end + 1):
            out_idx = i + self.options.shift_final_indexes
            command = convert_slice_image(
                input_image=self.f['final_deformations_inverse'](idx=i),
                output_image=self.f['rescaled_deformations_inverse'](idx=out_idx),
                scaling=norm_spacing,
                spacing=[norm_spacing, norm_spacing])
            commands.append(copy.deepcopy(command))
        self.execute(commands)

        # Ok, now we prepare rescaled source images (we have to change the
        # spacing as, again, the spacing used in computations is ... 1x1mm
        commands = []
        for i in range(start, end + 1):
            out_idx = i + self.options.shift_final_indexes
            command = convert_slice_image_grayscale(
                input_image=self.f['init_slice'](idx=i),
                output_image=self.f['rescaled_source'](idx=out_idx),
                spacing=[norm_spacing, norm_spacing])
            commands.append(copy.deepcopy(command))
        self.execute(commands)

    def _get_stack_intermediate_command(self):
        """
        Helper function for stacking resliced slices after completing
        an iteration.
        """

        iteration = self.current_iteration

        stack_grayscale = pos_wrappers.stack_and_reorient_wrapper(
            stack_mask=self.f['iteration_stack_mask'](iter=iteration),
            slice_start=self.options.startSlice,
            slice_end=self.options.endSlice,
            slice_step=1,
            permutation_order=self.options.output_volume_permute_axes,
            orientation_code=self.options.output_volume_orientation,
            output_type=self.options.output_volume_scalar_type,
            spacing=self.options.output_volume_spacing,
            origin=self.options.output_volume_origin,
            interpolation=self.options.output_volume_interpolation,
            resample=self.options.output_volume_resample)

        return stack_grayscale

    def _stack_intermediate(self):
        iteration = self.current_iteration

        if self.options.inputVolume:
            stack_input_volume = self._get_stack_intermediate_command()
            stack_input_volume.updateParameters({
                'stack_mask': self.f['iteration_stack_mask'](iter=iteration),
                'output_volume_fn': self.f['inter_res_gray_vol'](
                    iter=iteration,
                    output_naming=self.options.outputNaming)})
            stack_input_volume()

        if self.options.outlineVolume:
            stack_outline_volume = self._get_stack_intermediate_command()
            stack_outline_volume.updateParameters({
                'stack_mask': self.f['iteration_stack_outline'](iter=iteration),
                'output_volume_fn': self.f['inter_res_outline_vol'](
                    iter=iteration,
                    output_naming=self.options.outputNaming)})
            stack_outline_volume()

        if self.options.maskedVolume:
            stack_masked_volume = self._get_stack_intermediate_command()
            stack_masked_volume.updateParameters({
                'stack_mask': self.f['iteration_stack_cmask'](iter=iteration),
                'output_volume_fn': self.f['inter_res_custom_vol'](
                    iter=iteration,
                    output_naming=self.options.outputNaming)})
            stack_masked_volume()

    @classmethod
    def _getCommandLineParser(cls):
        parser = output_volume_workflow._getCommandLineParser()

        input_parameters = \
            OptionGroup(parser, 'Input images and parameters')

        input_parameters.add_option('--slicing-plane', default=1,
            type='int', dest='slicing_plane', metavar="INT",
            help=r('Index of the slicing plane. Please provide \
            a single integer here, defaults to: 1. Allowed values: 0, 1, 2'))
        input_parameters.add_option('--start-slice', default=0,
            type='int', dest='startSlice', metavar="INT",
            help=r('Index of the first slice of the stack.\
            Please provide a positive integer here. The provided value has to \
            be smaller than the one provided via the \'--end-slice\' option.\
            This is an obligatory parameter.'))
        input_parameters.add_option('--end-slice', default=None,
            type='int', dest='endSlice', metavar="INT",
            help=r('Index of the last slice of the stack. \
            Please provide a positive integer here. The provided value has to \
            be larger than the one provided via the \'--start-slice\' option.\
            This is an obligatory parameter.'))
        input_parameters.add_option('--shift-final-indexes', default=0,
            type='int', dest='shift_final_indexes', metavar="INT",
            help=r('Shift indexes of the final warps and slices. \
            An integer is required, defaults to zero. This option will cause \
            the final resliced images and the displacement fields names to \
            be shifted with respect to the initial value by the provided \
            offset. Please be carefull with negative values as they are \
            not fully tested yet.'))
        input_parameters.add_option('--neighbourhood', default=1, type='int',
            dest='neighbourhood', metavar="INT",
            help=r('Radius (number of preceesing and following sections) \
            which will be included for to create an average image which \
            will be used as a fixed image during coregistration of \
            given section. Denoting the neighbourhood by n and having \
            a section i, the average image will be created based on \
            sections i-n through i+n excluding the section i.'))
        input_parameters.add_option('--iterations', default=10,
            type='int', dest='iterations', metavar="INT",
            help='Number of iterations. Please provide a positive \
            integer here. This in an oblitatory parameter.')
        input_parameters.add_option('--input-volume', '-i', default=None,
            type='str', dest='inputVolume', nargs=2,
            metavar="FLOAT_0-1 NIFTI_FILE",
            help=r('Input volume which undergoes smooth nonlinear \
            reconstruction. This is an obligatory parameter. \
            The first value has to be a float ranging from 0 to 1 \
            denoting weight of similarity metric based on this particular \
            input volume. If there is only one volume provided \
            as an input, please provide 1 as the weight. \
            The second parameter is a niftii file with the actual \
            image stack. Single channel (preferably uchar) \
            nifti file is required here.'))
        input_parameters.add_option('--outline-volume', '-o', default=None,
            type='str', dest='outlineVolume', nargs=2,
            metavar="FLOAT_0-1 NIFTI_FILE",
            help=r('Outline label driving the registration. \
            This is an optional parameter. The first value has to be a float \
            ranging from 0 to 1 denoting the weight of similarity metric \
            based on this particular image stack. The second value is \
            a niftii file compatible with the one provided as the \
            \'--input-volume\' containing a binary mask showing which \
            parts of the image represent the brain tissue and which does not.'))
        input_parameters.add_option('--reference-volume', '-r', default=None,
            type='str', dest='referenceVolume', nargs=2,
            metavar="FLOAT_0-1 NIFTI_FILE",
            help=r('External image stack to drive the deformable \
            reconstruction. The first value is the weight of the similarity \
            metric based on this particular image stack. The second value \
            is a niftii file file compatible with the one provided as the \
            \'--input-volume\' containing an external reference image used \
            to drive the deformable reconstruction. \
            This is an optional parameter.'))
        input_parameters.add_option('--masked-volume', '-m', default=None,
            type='str', dest='maskedVolume', nargs=2,
            metavar="FLOAT_0-1 NIFTI_FILE",
            help=r('Custom slice mask for driving the registration (optional).\
            The behaviour of the feature is slightly complicated and, \
            for the time being, is described in documentation of the \
            \'_get_outliers_registration_assignment\' function \
            (use grep to find it).'))
        input_parameters.add_option('--masked-volume-file', default=None,
            type='str', dest='maskedVolumeFile', metavar="NIFTI_FILE",
            help=r('File determining fixed and moving slices for \
            custom registration. Check out the \'--masked-volume\' \
            description for details.'))
        input_parameters.add_option('--register-subset', default=None, type='str',
            dest='registerSubset', metavar="TXT_FILE",
            help=r('Optional parameter. \
            Limit the indexes of the images used in the reconstruction \
            process to a specified subset. Please provide a txt file in \
            which each line contains an index of a section. Only one index \
            per line is allowed.'))
        input_parameters.add_option('--output-naming', default="_",
            type='str', metavar="STR",
            dest='outputNaming', help=r("Ouput naming scheme for all \
            the results."))

        parser.add_option_group(input_parameters)

        workflow_settings = \
            OptionGroup(parser, 'Options for controlling the workflow')

        workflow_settings.add_option('--start-from-iteration', default=0,
            type='int', dest='startFromIteration', metavar="INT",
            help=r('Iteration number from which the calculations will start.\
            To make this option work, calculations for the previous iterations\
            have to be already present in the working directory.'))
        workflow_settings.add_option('--skip-transformations', default=False,
            dest='skipTransformations', action='store_const', const=True,
            help=r('Skip transformations. The part of the workflow in which \
            the transformations are calculated is not executed.'))
        workflow_settings.add_option('--skip-preprocessing', default=False,
            dest='skipSlicePreprocess', action='store_const', const=True,
            help=r('Skip slice preprocessing. THe part of the workflow in which\
            preprocessing of the input images will not be executed.'))
        workflow_settings.add_option('--stack-final-transformation',
            default=False, const=True,
            dest='stackFinalDeformation', action='store_const',
            help=r('Merges displacement fields obtained during the individual \
            iterations of the reconstruction process into a single \
            displacement fiels. This is also performed for the inverse \
            displacement field as well. You probably want this option \
            to be active almost all times.'))
        parser.add_option_group(workflow_settings)

        registration_parameters = \
            OptionGroup(parser, 'Registration parameters')

        registration_parameters.add_option('--ants-image-metric',
            type='choice', default='CC', choices=["CC", "MI", "MSQ"],
            dest='antsImageMetric', metavar="STR",
            help=r('ANTS image to image metric. See ANTS documentation.\
            Allowed options: CC, MI, MSQ.'))
        registration_parameters.add_option('--ants-image-metric-opt', default=8,
            type='int', dest='antsImageMetricOpt', metavar="INT",
            help=r('Parameter of ANTS i2i metric.\
            See the ANTS documentation.'))
        registration_parameters.add_option('--ants-gradient-step', default=0.15,
            type='float', dest='antsTransformation', metavar="FLOAT",
            help=r('Tranformations gradient step. See the ANTS documentation.'))
        registration_parameters.add_option('--ants-regularization-type',
            default='Gauss', type='str', dest='antsRegularizationType',
            help=r('Ants regulatization type. See the ANTS documentation.'))
        registration_parameters.add_option('--ants-regularization',
            default=[3.0, 1.0],
            type='float', nargs=2, dest='antsRegularization',
            help='Ants regulatization. See the ANTS documentation.')
        registration_parameters.add_option('--ants-iterations', type='str',
            metavar="INT_X_INT_ETC.",
            default="1000x1000x1000x1000x1000", dest='antsIterations',
            help=r('Number of deformable registration iterations (optional). \
            Provide a series of integers joined with the \'x\' character.\
            For example: \'1000x1000x1000x0\'.\
            Also, dee the ANTS documentation for more details.'))
        registration_parameters.add_option('--plane-spacing', default=1.,
            type='float', dest='planeSpacing', metavar="FLOAT",
            help=r('Resolution of the individual section \
            assuming isotropic pixel size in milimiters per pixel. \
            Deafults to 1 mm/px.'))

        parser.add_option_group(registration_parameters)

        return parser

if __name__ == '__main__':
    options, args = deformable_reconstruction_workflow.parseArgs()
    workflow = deformable_reconstruction_workflow(options, args)
    workflow.launch()
