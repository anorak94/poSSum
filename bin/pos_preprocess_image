#!/usr/bin/env python
# -*- coding: utf-8 -*


"""
Preprocess slices for registration and reconstruction.
"""

import itk
from possum import pos_wrapper_skel
from possum.pos_itk_core import get_image_region, autodetect_file_type,\
        types_reduced_dimensions, resample_image_filter
from possum.pos_common import r


def prepare_single_channel(input_image,
    scale_factor=None, crop_index=None, crop_size=None,
    median_radius=None, invert=False, invert_max=255,
    rescale_min=None, rescale_max=None):

    # Determine image dimensionality:
    image_dim = len(input_image.GetSpacing())

    # Declare an variable holding output of the last applied workflow:
    last_output = None

    # Handle image cropping:
    if crop_index and crop_size:
        bounding_box = get_image_region(image_dim, crop_index, crop_size)

        crop_filter = \
            itk.RegionOfInterestImageFilter[input_image, input_image].New()
        crop_filter.SetInput(input_image)
        crop_filter.SetRegionOfInterest(bounding_box)
        crop_filter.Update()

        last_output = crop_filter.GetOutput()
    else:
        last_output = input_image
        last_output.Update()
        last_output.UpdateOutputData()
        last_output.UpdateOutputInformation()

    # Handle image inversion:
    if invert:
        max_filter = itk.MinimumMaximumImageFilter[input_image].New()
        max_filter.SetInput(last_output)

        invert_filter = \
            itk.InvertIntensityImageFilter[input_image, input_image].New()
        invert_filter.SetInput(last_output)

        if invert_max:
            invert_filter.SetMaximum(invert_max)
        else:
            invert_filter.SetMaximum(max_filter.GetMaximum())

        invert_filter.Update()
        last_output = invert_filter.GetOutput()

    # Handle median filtering
    if median_radius:
        median = itk.MedianImageFilter[input_image, input_image].New()
        median.SetInput(last_output)
        median.SetRadius(median_radius)
        median.Update()

        last_output = median.GetOutput()

    # Handle image rescaling
    if (scale_factor is not None) and (int(scale_factor) != 1):
        last_output = resample_image_filter(last_output, scale_factor)

    # Handle results rescaling
    if all([rescale_min, rescale_max]):
        rescaler = \
            itk.RescaleIntensityImageFilter[input_image, input_image].New()
        rescaler.SetInput(last_output)
        rescaler.SetOutputMinimum(rescale_min)
        rescaler.SetOutputMaximum(rescale_max)

        last_output = rescaler.GetOutput()

    return last_output


def collapse_pseudo_3d_image(input_image, input_type,
            plane_to_collapse=2, plane_to_extract=0):
    """
    Colapses three dimensional image by extracting single a two dimensional
    slice. The extraction is performed only if the input image is three
    dimensional. The procedure will not work for images with dimensionality
    larger than 3. For dimensionality equal to 2, no processing is performed.
    """
    # Determine image dimensionality:
    image_dim = len(input_image.GetSpacing())

    # In case if dimensionality equals 3, do the extraction:
    if image_dim == 3:
        region = input_image.GetBufferedRegion()
        region.SetSize(plane_to_collapse, 0)
        region.SetIndex(plane_to_collapse, plane_to_extract)

        # Determine the type of the collapsed image by cheking it in an
        # approperiate lookup table.
        collapsed_img_type = types_reduced_dimensions[input_type]

        # Initialize and set up image slicing workflow
        extract_slice = \
            itk.ExtractImageFilter[input_type, collapsed_img_type].New()
        extract_slice.SetExtractionRegion(region)
        extract_slice.SetInput(input_image)
        extract_slice.SetDirectionCollapseToIdentity()
        extract_slice.Update()

        # Return new, collapsed image type as well as the collapsed image
        result = extract_slice.GetOutput()
        return result, collapsed_img_type
    else:
        # Just pass the initial images and input types
        result = input_image
        return input_image, input_type


class preprocess_image_workflow(pos_wrapper_skel.enclosed_workflow):
    """
    """

    _rgb_out_type = itk.Image.RGBUC2
    _rgb_out_component_type = itk.Image.UC2
    _grayscale_out_type = itk.Image.F2

    def _validate_options(self):
        super(self.__class__, self)._initializeOptions()

        assert self.options.input_image is not None, \
            self._logger.error(r("The input image (-i ...) \
            is an obligatory option!"))

    def launch(self):
        # Execute the parents before-execution activities
        super(self.__class__, self)._pre_launch()

        # Determine the filetype and then load the image to be processed.
        self._logger.debug("Reading volume file %s", self.options.input_image)
        self._input_type = autodetect_file_type(self.options.input_image)
        reader = itk.ImageFileReader[self._input_type].New()
        reader.SetFileName(self.options.input_image)
        reader.Update()

        # Read number of the components of the image.
        self._numbers_of_components =\
            reader.GetOutput().GetNumberOfComponentsPerPixel()
        self._logger.info("Determined number of components: %d",
                          self._numbers_of_components)

        # Collapse the image if required. The purpose of the collapsing
        # procedure is to make trully two dimensional image out of pseudo
        # threedimensional image (an image with third dimension equal to 1).
        # This often happens due to sloppiness of some software. Collapsing the
        # image also updates the input image type.
        self._logger.debug("Collapsing the input image")
        self._collapsed, self._input_type = \
            collapse_pseudo_3d_image(reader.GetOutput(), self._input_type)

        # Just determine number of dimensions of the image. Should be always
        # two as we have just collapsed 3D images. Check it by an assertion:
        self._image_dim = len(self._collapsed.GetSpacing())

        assert (self._image_dim == 2), "Number of dimensions should be 2!"
        self._logger.debug("Determined image dimensionality: %d",
                           self._image_dim)

        # If the number of components is higher than one, it means we are
        # dealing with a multichannel image. In such case every component is
        # processed separately. The grayscale image is extracted from the
        # multichannel image according to the provided options.
        if self._numbers_of_components > 1:
            self._process_multichannel_image()
        else:
            self._process_grayscale_image()

        # Run parent's post execution activities
        super(self.__class__, self)._post_launch()

    def _get_crop_settings(self):
        """
        Determine if output image cropping is enabled. The output image
        cropping is determined by the `extract_roi` command line option. The
        first two integers determine the origin of the subregion to be cropped
        while the two last integers denote the size of the output region. The
        easiest way to determine subregion settings is just to try it :)
        """
        try:
            crop_index = self.options.extract_roi[0:2]
        except:
            crop_index = None

        try:
            crop_size = self.options.extract_roi[2:4]
        except:
            crop_size = None

        return crop_index, crop_size

    def _process_multichannel_image(self):
        """
        Execute slice preparation pipeline on a multichannel image.
        """

        if self.options.output_rgb_image:
            # Just initialize an array holding processed individual channels.
            processed_components = []

            # Now, we iterate over all components. Each component is processed
            # according to provided settings
            self._logger.debug("Extracting rgb image from rgb slice.")

            for i in range(self._numbers_of_components):
                self._logger.debug("Processing component: %s.", i)

                # Extract individual component from the multichannel image
                self._logger.debug("Extracting component: %s.", i)
                extract_filter = itk.VectorIndexSelectionCastImageFilter[
                    self._collapsed, self._rgb_out_component_type].New(
                        Input=self._collapsed,
                        Index=i)

                # Process the extracted components.
                crop_index_s, crop_size_s = self._get_crop_settings()
                processed_channel = prepare_single_channel(
                    extract_filter.GetOutput(),
                    scale_factor=self.options.resize_factor,
                    crop_index=crop_index_s,
                    crop_size=crop_size_s,
                    median_radius=None,
                    invert=self.options.invert_rgb_image)

                # Cast the processed channel to approperiate type (the type
                # based on which multicomponent image will be created)
                caster = itk.CastImageFilter[
                    self._rgb_out_component_type,
                    self._rgb_out_component_type].New(processed_channel)
                caster.Update()

                # Collect the processed channel in the results array
                self._logger.debug("Appending component %s to the results.", i)
                processed_components.append(caster.GetOutput())

            # Compose back the processed individual components into
            # multichannel image.
            compose = itk.ComposeImageFilter[
                self._rgb_out_component_type,
                self._input_type].New(
                    Input1=processed_components[0],
                    Input2=processed_components[1],
                    Input3=processed_components[2])

            # Write the processed multichannel image.
            self._logger.debug("Writing the rgb(rgb) image to: %s.",
                            self.options.output_rgb_image)
            writer = itk.ImageFileWriter[self._rgb_out_type].New(
                compose, FileName=self.options.output_rgb_image)
            writer.Update()

        if self.options.output_grayscale_image:
            # Now extract a grayscale image from the provided multichannel
            # image. The channel to extract is a specific color provided via
            # command line options.
            self._logger.debug("Extracting grayscale image from rgb slice.")

            # A simple dictionary mapping string provided via command line to a
            # specific image channel (image channel is provided as string while
            # the workflow requires an integer)
            str_to_num_map = {'r': 0, 'g': 1, 'b': 2,
                              'red': 0, 'green': 1, 'blue': 2}

            # Extract a specific color channel based on which grayscale image
            # will be prepared.
            registration_channel = self.options.color_channel
            self._logger.debug("Extract color channel: %s.",
                               registration_channel)
            extract_filter = itk.VectorIndexSelectionCastImageFilter[
                self._input_type, self._rgb_out_component_type].New(
                    Input=self._collapsed,
                    Index=str_to_num_map[registration_channel])
            extract_filter.Update()

            # A casting is required before processing the extracted color
            # channel as the extracted image type may be different than the
            # grayscale working type.
            caster = itk.CastImageFilter[
                self._rgb_out_component_type,
                self._grayscale_out_type].New(extract_filter)
            caster.Update()

            self._logger.debug("Processing a single channel...")
            crop_index_s, crop_size_s = self._get_crop_settings()
            processed_channel = prepare_single_channel(
                    caster.GetOutput(),
                    scale_factor=self.options.resize_factor,
                    crop_index=crop_index_s,
                    crop_size=crop_size_s,
                    median_radius=self.options.median_filter_radius,
                    invert=self.options.invert_source_image)

            # Write the grayscale(rgb) image to file.
            self._logger.debug("Writing the grayscale image to %s.",
                            self.options.output_grayscale_image)
            writer = itk.ImageFileWriter[self._grayscale_out_type].New()
            writer.SetInput(processed_channel)
            writer.SetFileName(self.options.output_grayscale_image)
            writer.Update()

    def _process_grayscale_image(self):
        """
        Execute slice processing workflow on a grayscale image.
        """

        if self.options.output_rgb_image:
            self._logger.debug("Extracting rgb(grayscale) image.")

            # The rgb(grayscale) image is created by simply cloning the
            # grayscale channel three times. However, before composing, the
            # source image has to be casted to the float type.
            self._logger.debug("Casting the image from %s, to %s",
                str(self._input_type), str(self._rgb_out_component_type))
            caster = itk.CastImageFilter[self._input_type,
                                         self._rgb_out_component_type].New()
            caster.SetInput(self._collapsed)
            caster.Update()

            crop_index_s, crop_size_s = self._get_crop_settings()
            processed_channel = prepare_single_channel(
                caster.GetOutput(),
                scale_factor=self.options.resize_factor,
                crop_index=crop_index_s,
                crop_size=crop_size_s,
                median_radius=None,
                invert=self.options.invert_rgb_image)

            # Finally the multichannel image can be composed from individual
            # grayscale channel(s) prepared in the previous step.
            self._logger.debug("Cloning the grayscale image into rgb image.")
            compose_filter = itk.ComposeImageFilter[
                self._rgb_out_component_type,
                self._rgb_out_type].New(
                    Input1=processed_channel,
                    Input2=processed_channel,
                    Input3=processed_channel)

            self._logger.debug("Writing the rgb(grayscale) image to %s.",
                            self.options.output_rgb_image)
            writer = itk.ImageFileWriter[self._rgb_out_type].New(
                compose_filter, FileName=self.options.output_rgb_image)
            writer.Update()

        # Now, let's extraxct the processed grayscale image (only if such
        # option is requested).
        if self.options.output_grayscale_image:
            self._logger.debug("Extracting grayscale(grayscale) image.")
            crop_index_s, crop_size_s = self._get_crop_settings()
            processed_channel = prepare_single_channel(
                    self._collapsed,
                    scale_factor=self.options.resize_factor,
                    crop_index=crop_index_s,
                    crop_size=crop_size_s,
                    median_radius=self.options.median_filter_radius,
                    invert=self.options.invert_source_image)

            # Cast the processed grayscale image to the grayscale image output
            # type as we want to keep the code flexible (it is possible that
            # the output type is different than grayscale writer type)
            self._logger.debug("Casting the image from %s, to %s",
                        str(self._input_type), str(self._grayscale_out_type))
            caster = itk.CastImageFilter[
                self._input_type, self._grayscale_out_type].New(processed_channel)
            caster.Update()

            # Finally we write the processed grayscale image to a file.
            self._logger.debug("Writing the grayscale(grayscale) image to %s.",
                            self.options.output_grayscale_image)
            writer = itk.ImageFileWriter[self._grayscale_out_type].New(caster,
                        FileName=self.options.output_grayscale_image)
            writer.Update()

    @staticmethod
    def parseArgs():
        usage_string = r("Usage: %prog -i FILE\n\
            [-g FILE] [-r FILE] \n\
            [other options]")
        description_string = r("This script performs several \
        operations on the 2d image in order to prepare it to \
        a reconstruction process.")

        parser = pos_wrapper_skel.enclosed_workflow._getCommandLineParser()
        parser.set_usage(usage_string)
        parser.set_description(description_string)

        parser.add_option('--input-image', '-i', dest='input_image',
            type='str', default=None, metavar="FILE",
            help=r('Input image filename. \
            See the detailed workflow description \
            for the detailed criteria on the proper input file type.'))
        parser.add_option('--output-grayscale-image', '-g',
            dest='output_grayscale_image', type='str',
            default=None, metavar="FILE",
            help='Name of the output grayscale image.')
        parser.add_option('--output-rgb-image', '-r',
            dest='output_rgb_image', type='str',
            default=None, metavar="FILE",
            help='Name of the output rgb image.')

        parser.add_option('--extract-roi', dest='extract_roi',
            default=None, type='int', nargs=4, metavar="\'INT INT INT INT\'",
            help=r('Causes the workflow to extract a region of interest \
            from the provided image. This is useful if one wants to \
            use only a subset of the image in the reconstruction. \
            Four integer (pixel indices) values are required: \
            (ox, oy, sx, sy). Ox and Oy stand for origin in pixels and \
            the sy and sx are obviously the size of the regions to extract.'))
        parser.add_option('--resize-factor', dest='resize_factor',
            default=None, type='float', metavar="\'FLOAT_0-1 FLOAT_0-1\'",
            help=r('Scaling factor for the source image. Provide a float \
            number between 0 and 1. Do not provide 0 as this will cause \
            stupid problems (you asked for it). Providing 1 also does not make \
            much sense as it will not cause any actual resampling. \
            The resampling is conducted as a last stage of processing \
            after cropping (this is important) and after all smoothing, \
            etc.'))
        parser.add_option('--color-channel',
            dest='color_channel', default='blue',
            choices=['r', 'g', 'b', 'red', 'green', 'blue'],
            help=r('In rgb images - color channel on which \
            will be used to generate the grayscale image. Has no meaning for \
            grayscale only input images. Possible values: \
            r/red, g/green, b/blue.'))
        parser.add_option('--median-filter-radius', dest='median_filter_radius',
            default=None, type='int', nargs=2, metavar="\'INT INT\'",
            help=r('If provided triggers a smoothing of the grayscale image. \
            Does not trigger smoothing of the rgb image as rgb images \
            are never smoothed. Requires two integer values - median filter \
            radius along each image axis (IN VOXELS). \
            Since the radii are independent so you can do \
            some fancy-shmancy anisoptropic smoothing if you want. Examples: \
            \'2 2\' or \'0 3\', etc.'))
        parser.add_option('--invert-source-image', dest='invert_source_image',
            default=False, action='store_const', const=True,
            help=r('Invert source image: both, the grayscale image and \
            the rgb image. Therefore, the output images will be inverted w.r.t \
            the input image.'))
        parser.add_option('--invert-rgb-image',
            dest='invert_rgb_image', default=False,
            action='store_const', const=True,
            help=r('Inverts the rgb image in addition to the \
            \'--invert-source-image\'. Yes, wired. This is usefull pretty \
            much in only one situation: When you provide rgb image as an \
            input and you want to get inverted grayscale image and \
            not inverted output rgb images.'))

        (options, args) = parser.parse_args()
        return (options, args)


if __name__ == '__main__':
    options, args = preprocess_image_workflow.parseArgs()
    workflow = preprocess_image_workflow(options, args)
    workflow.launch()
